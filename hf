#!/bin/sh

### includes ###
. ./files/scripts/Helper.sh
. ./files/scripts/DebugPrint.sh
. ./files/conf/hf.conf

### functions ###
# $@ all parameters
hf_main() {
	dpush "main"
	case "$1" in
		cvsync|cs) hf_cvsync "$2";;
		cvs) hf_cvs_up "$2";;
		pull) hf_pull;;
		push) hf_push;;
		kernel|ke) hf_make_kernel "$2" "$3";;
		userland|us) hf_make_build;;
		xenocara|xe) hf_make_xenocara;;
		hellfish|hf) hf_recreate_exp_branch;;
		cmd) hf_command "$2";;
		*) hf_usage;;
	esac
	dpop
}

hf_usage() {
	dpush "usage"
	echo "usage: $0 <command> [option] \"input\" ..."
	echo "available commands (aliases)"
	echo "cvsync (cs): sync cvs repos and git repos"
	printf "\t[-p] push git repos after sync\n"
	echo "cvs: make git workdirs cvs compatible"
	printf "\t[-s] first sync cvs repo, but not git\n"
	echo "pull: pull all git repos"
	echo "push: push all git repos"
	echo "kernel (ke): build kernel"
	printf "\t[-i] install\n\t[-r] reboot\n"
	echo "userland (us): build userland"
	echo "xenocara (xe): build xenocara"
	echo "hellfish (hf): recreate experimental branch"
	echo "cmd: execute command in all submodules"
	dpop
}

# $1 cmd, $2 max_return_status
hf_command() {
	dpush "command"
	hf__command "$SRCNAME" "$1" "$2"
	hf__command "$PORTSNAME" "$1" "$2"
	hf__command "$XENOCARANAME" "$1" "$2"
	dpop
}

# $1 directory, $2 cmd, $3 max_return_status
hf__command() {
	dpush "_command"
	[ -z "$3" ] && ERR=0 || ERR="$3"
	echo "PWD $1 | CMD $2"
	cd "$1"
	    [ $? -gt 0 ] && hf_error 128
	$2
	RET=$?
	    [ $RET -gt $ERR ] && hf_error $RET
	cd "$HFDIR"
	    [ $? -gt 0 ] && hf_error 128
	dpop
}

hf_recreate_exp_branch() {
	dpush "recreate_exp_branch"
	hf__command "$SRCNAME" "git checkout master"
	hf__command "$SRCNAME" "git branch -D $EXPERIMENTAL_BRANCH" 1
	hf__command "$SRCNAME" "git checkout -b $EXPERIMENTAL_BRANCH"
	hf__merge_hf_branches "$SRCNAME"
	dpop
}

hf__merge_hf_branches() {
	dpush "_merge_hf_branches"
	cd "$1"
	  if [ $? -gt 0 ]; then hf_error 1; fi
	git branch 2>/dev/null | grep "hf-" | cut -c 3- | while read line
	do
		git merge --no-ff -m "Merge $line into $EXPERIMENTAL_BRANCH" $line
	done
	cd "$HFDIR"
	  if [ $? -gt 0 ]; then hf_error 5; fi
	dpop
}

hf_make_xenocara() {
	dpush "make_xenocara"
	cd ${BSDXENOCARADIR}
	  if [ $? -gt 0 ]; then hf_error 1; fi
	rm -rf ${BSDXOBJDIR}/*
	  if [ $? -gt 0 ]; then hf_error 2; fi
	make clean
	  if [ $? -gt 0 ]; then hf_error 3; fi
	make obj
	  if [ $? -gt 0 ]; then hf_error 4; fi
	make bootstrap
	  if [ $? -gt 0 ]; then hf_error 5; fi
	make build | tee ${LOG_FILE}
	  if [ $? -gt 0 ]; then hf_error 8; fi
	dpop
}

hf_make_build() {
	dpush "make_build"
	cd ${BSDSRCDIR}
	  if [ $? -gt 0 ]; then hf_error 1; fi
	rm -rf ${BSDOBJDIR}/*
	  if [ $? -gt 0 ]; then hf_error 2; fi
	make clean
	  if [ $? -gt 0 ]; then hf_error 3; fi
	make obj
	  if [ $? -gt 0 ]; then hf_error 4; fi
	cd ${BSDSRCDIR}/etc
	  if [ $? -gt 0 ]; then hf_error 5; fi
	env DESTDIR=/ make distrib-dirs
	  if [ $? -gt 0 ]; then hf_error 6; fi
	cd ${BSDSRCDIR}
	  if [ $? -gt 0 ]; then hf_error 7; fi
	make build | tee ${LOG_FILE}
	  if [ $? -gt 0 ]; then hf_error 8; fi
	dpop
}

hf_make_kernel() {
	dpush "make_kernel"
	cd ${BSDSRCDIR}/sys/arch/${ARCH}/conf
	  if [ $? -gt 0 ]; then hf_error 1; fi
	config $KERNEL
	  if [ $? -gt 0 ]; then hf_error 2; fi
	cd ${BSDSRCDIR}/sys/arch/${ARCH}/compile/$KERNEL
	  if [ $? -gt 0 ]; then hf_error 3; fi
	make clean
	  if [ $? -gt 0 ]; then hf_error 4; fi
	make | tee ${LOG_FILE}
	  if [ $? -gt 0 ]; then hf_error 5; fi

	if [ "x$1" = "x-i" ]
	then
		make install
		  if [ $? -gt 0 ]; then hf_error 6; fi
	fi
	
	if [ "x$2" = "x-r" ]
	then
		reboot
		  if [ $? -gt 0 ]; then hf_error 7; fi
	fi
	dpop
}

hf_cvs_up() {
	dpush "cvs_up"
	if [ "x$1" == "x-s" ]
	then
		hf_cvsync_only
	fi

	echo "[1/3] $SRCNAME"
	hf__cvs_up "$SRCNAME"
	echo "[2/3] $PORTSNAME"
	hf__cvs_up "$PORTSNAME"
	echo "[3/3] $XENOCARANAME"
	hf__cvs_up "$XENOCARANAME"
	dpop
}

hf__cvs_up() {
	dpush "_cvs_up"
	cd "$1"
	  if [ $? -gt 0 ]; then hf_error 6; fi
	__start_dots	
	cvs -d $CVSROOT up -Pd >> $CVSYNC_LOG_FILE 2>&1
	  if [ $? -gt 1 ]; then hf_error 6; fi
	__stop_dots
	cd "$HFDIR"
	  if [ $? -gt 0 ]; then hf_error 6; fi
	dpop
}

hf_push() {
	dpush "push"
	echo "[1/4] $SRCNAME"
	hf__push "$SRCNAME"
	echo "[2/4] $PORTSNAME"
	hf__push "$PORTSNAME"
	echo "[3/4] $XENOCARANAME"
	hf__push "$XENOCARANAME"
	echo "[4/4] hellfish"
	hf__push "./"
	dpop
}

hf_pull() {
	dpush "pull"
	hf__command "./" "git checkout master"
	hf_command "git checkout master"
	hf__command "./" "git pull"
	hf_command "git pull"
	dpop
}

hf__push() {
	dpush "_push"
	cd "$1"
	  if [ $? -gt 0 ]; then hf_error 6; fi
	git push
	  if [ $? -gt 0 ]; then hf_error 6; fi
	cd "$HFDIR"
	  if [ $? -gt 0 ]; then hf_error 6; fi
	dpop
}

hf__clear_git_workdir() {
	dpush "_clear_git_workdir"
	cd "$1"
	  if [ $? -gt 0 ]; then hf_error 3; fi
	git checkout master >> $CVSYNC_LOG_FILE
	  if [ $? -gt 0 ]; then hf_error 3; fi
	git pull 
	  if [ $? -gt 0 ]; then hf_error 3; fi
	__start_dots
	rm -rf *
	  if [ $? -gt 0 ]; then hf_error 3; fi
	__stop_dots
	cd "$HFDIR"
	  if [ $? -gt 0 ]; then hf_error 3; fi
	dpop
}

hf__cvs_co() {
	dpush "_cvs_co"
	__start_dots
	cvs -d $CVSROOT co -P $1 >> $CVSYNC_LOG_FILE 2>&1
	  if [ $? -gt 1 ]; then hf_error 5; fi
	__stop_dots
	dpop
}

hf__add_to_git() {
	dpush "_add_to_git"
	cd "$1"
	  if [ $? -gt 0 ]; then hf_error 4; fi
	git add -A :/ >> $CVSYNC_LOG_FILE
	  if [ $? -gt 0 ]; then hf_error 4; fi
	git commit -m "sync with openbsd-current" >> $CVSYNC_LOG_FILE 2>&1
	  if [ $? -gt 1 ]; then hf_error 4; fi
	if [ "x$2" == "x-p" ]
	then
		git push
		  if [ $? -gt 0 ]; then hf_error 4; fi
	fi
	cd "$HFDIR"
	dpop
}

hf_cvsync_only() {
	dpush "cvsync_only"
	echo "cvsync repo"
	__start_dots
	cvsync -c "$CVSYNCCONF" >> $CVSYNC_LOG_FILE
	  if [ $? -gt 0 ]; then hf_error 2; fi
	__stop_dots
	dpop
}

hf_cvsync() {
	dpush "cvsync"
	hf_cvsync_only

	echo "[1/3] clear git working directories"
	hf__clear_git_workdir "$BSDSRCDIR"
	hf__clear_git_workdir "$BSDPORTSDIR"
	hf__clear_git_workdir "$BSDXENOCARADIR"

	echo "[2/3] cvs checkout"
	hf__cvs_co $SRCNAME
	hf__cvs_co $PORTSNAME
	hf__cvs_co $XENOCARANAME

	echo "[3/3] add to git"
	hf__add_to_git "$BSDSRCDIR" "$1"
	hf__add_to_git "$BSDPORTSDIR" "$1"
	hf__add_to_git "$BSDXENOCARADIR" "$1"

	rm $CVSYNC_LOG_FILE
	dpop
}

hf_error() {
	__stop_dots
	dprint_trace_exit_if_error $1
}

### main ###
[ $# -lt 1 ] &&	hf_usage || hf_main "$@"
exit 0
