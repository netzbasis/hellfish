#!/bin/sh

. ./hf.conf

### helper functions ###
DOTS_RUNNING_PID=0

helper_start_dots() {
	/bin/sh <<EOF &
echo -n " "
while [ 1 -eq 1 ]
do
sleep 5
echo -n "."
done
EOF
	
	DOTS_RUNNING_PID=$!
}

helper_stop_dots() {
	if [ $DOTS_RUNNING_PID -gt 0 ]
	then
		kill $DOTS_RUNNING_PID
	fi

	DOTS_RUNNING_PID=0
}

### hellfish functions ###
hf_main() {
	case "$1" in
		cvsync|cs) hf_cvsync "$1";;
		*) hf_usage;;
	esac
}

hf_usage() {
	echo "usage: $0 <command> [option]"
	echo "available commands (aliases)"
	echo "cvsync (cs): sync cvs and git"
	printf "\t[-p] push git repos after sync\n"
}

hf__clear_git_workdir() {
	cd "$1"
	  if [ $? -gt 1 ]; then exit 3; fi
	git checkout master >> $CVSYNC_LOG_FILE
	  if [ $? -gt 1 ]; then exit 3; fi
	git pull 
	  if [ $? -gt 1 ]; then exit 3; fi
	rm -rf *
	  if [ $? -gt 1 ]; then exit 3; fi
	cd "$HFDIR"
	  if [ $? -gt 1 ]; then exit 3; fi
}

hf__cvs_co() {
	cvs -d $CVSROOT co -P $1 >> $CVSYNC_LOG_FILE 2>&1
	  if [ $? -gt 1 ]; then exit 5; fi
}

hf__add_to_git() {
	cd "$1"
	  if [ $? -gt 1 ]; then exit 4; fi
	git add -A :/ >> $CVSYNC_LOG_FILE
	  if [ $? -gt 1 ]; then exit 4; fi
	git commit -m "sync with openbsd-current"
	  if [ $? -gt 1 ]; then exit 4; fi
	if [ "x$1" == "x-p" ]
	then
		git push master
		  if [ $? -gt 1 ]; then exit 4; fi
	fi
	cd "$HFDIR"
}

hf_cvsync() {
	echo "[1/4] cvsync repo"
	cvsync -c "$CVSYNCCONF" >> $CVSYNC_LOG_FILE
	  if [ $? -gt 1 ]; then exit 2; fi

	echo "[2/4] clear git working directories"
	hf__clear_git_workdir "$BSDSRCDIR"
	hf__clear_git_workdir "$BSDPORTSDIR"
	hf__clear_git_workdir "$BSDXENOCARADIR"

	echo "[3/4] cvs checkout"
	hf__cvs_co $SRCNAME
	hf__cvs_co $PORTSNAME
	hf__cvs_co $XENOCARANAME

	echo "[4/4] add to git"
	hf__add_to_git "$BSDSRCDIR" "$1"
	hf__add_to_git "$BSDPORTSDIR" "$1"
	hf__add_to_git "$BSDXENOCARADIR" "$1"

	rm $CVSYNC_LOG_FILE
}

### main ###
if [ $# -lt 1 ]
then
	hf_usage
else
	hf_main "$@"	
fi
