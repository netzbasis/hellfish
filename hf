#!/bin/sh

### includes ###
. ./files/scripts/Helper.sh
. ./files/scripts/DebugPrint.sh
. ./files/conf/hf.conf

### functions ###
# $@ all parameters
hf_main() {
	dpush "main"
	case "$1" in
		cvsync|cs) hf_cvsync "$2";;
		cvs) hf_cvs_up "$2";;
		pull) hf_pull;;
		push) hf_push;;
		kernel|ke) hf_make_kernel "$2" "$3";;
		userland|us) hf_make_build;;
		xenocara|xe) hf_make_xenocara;;
		hellfish|hf) hf_recreate_exp_branch;;
		cmd) hf_command "$2";;
		*) hf_usage;;
	esac
	dpop
}

hf_usage() {
	dpush "usage"
	echo "usage: $0 <command> [option] \"input\" ..."
	echo "available commands (aliases)"
	echo "cvsync (cs): sync cvs repos and git repos"
	printf "\t[-p] push git repos after sync\n"
	echo "cvs: make git workdirs cvs compatible"
	printf "\t[-s] first sync cvs repo, but not git\n"
	echo "pull: pull all git repos"
	echo "push: push all git repos"
	echo "kernel (ke): build kernel"
	printf "\t[-i] install\n\t[-r] reboot\n"
	echo "userland (us): build userland"
	echo "xenocara (xe): build xenocara"
	echo "hellfish (hf): recreate experimental branch"
	echo "cmd: execute command in all submodules"
	dpop
}

# $1 cmd, $2 max_return_status
hf_command() {
	dpush "command"
	hf__command "$SRCNAME" "$1" "$2"
	hf__command "$PORTSNAME" "$1" "$2"
	hf__command "$XENOCARANAME" "$1" "$2"
	dpop
}

# $1 directory, $2 cmd, $3 max_return_status
hf__command() {
	dpush "_command"
	[ -z "$3" ] && ERR=0 || ERR="$3"
	echo "===> PWD $1 CMD $2 <==="
	cd "$1"
	    [ $? -gt 0 ] && hf_error 128
	eval $2
	RET=$?
	    [ $RET -gt $ERR ] && hf_error $RET
	cd "$HFDIR"
	    [ $? -gt 0 ] && hf_error 128
	dpop
}

hf_recreate_exp_branch() {
	dpush "recreate_exp_branch"
	hf_command "git checkout master"
	hf_command "git branch -D $EXPERIMENTAL_BRANCH" 1
	hf_command "git checkout -b $EXPERIMENTAL_BRANCH"
	hf_command "git branch 2>/dev/null | grep 'hf-' | cut -c 3- | while read line; do git merge --no-ff -m 'Merge \$line into $EXPERIMENTAL_BRANCH' \$line; done"
	dpop
}

hf_make_xenocara() {
	dpush "make_xenocara"
	hf__command "$BSDXOBJDIR" "rm -rf *"
	hf__command "$XENOCARANAME" "make clean"
	hf__command "$XENOCARANAME" "make obj"
	hf__command "$XENOCARANAME" "make bootstrap"
	hf__command "$XENOCARANAME" "make build | tee ${LOG_FILE}"
	dpop
}

hf_make_build() {
	dpush "make_build"
	hf__command "$BSDOBJDIR" "rm -rf *"
	hf__command "$SRCNAME" "make clean"
	hf__command "$SRCNAME" "make obj"
	hf__command "$SRCNAME/etc" "env DESTDIR=/ make distrib-dirs"
	hf__command "$SRCNAME" "make build | tee ${LOG_FILE}"
	dpop
}

# $1 install, $2 reboot
hf_make_kernel() {
	dpush "make_kernel"
	hf__command "${BSDSRCDIR}/sys/arch/${ARCH}/conf" "config $KERNEL"
	hf__command "${BSDSRCDIR}/sys/arch/${ARCH}/compile/$KERNEL" "make clean"
	hf__command "${BSDSRCDIR}/sys/arch/${ARCH}/compile/$KERNEL" "make | tee ${LOG_FILE}"

	[ "x$1" = "x-i" ] && hf__command "${BSDSRCDIR}/sys/arch/${ARCH}/compile/$KERNEL" "make install"
	[ "x$2" = "x-r" ] && hf__command "./" "reboot"
	dpop
}

# $1 cvsync
hf_cvs_up() {
	dpush "cvs_up"
	[ "x$1" == "x-s" ] && hf_cvsync_only

	hf_command "cvs -d $CVSROOT up -Pd >> $CVSYNC_LOG_FILE 2>&1" 1
	dpop
}

hf_push() {
	dpush "push"
	hf_command "git push"
	hf__command "./" "git push"
	dpop
}

hf_pull() {
	dpush "pull"
	hf__command "./" "git checkout master"
	hf_command "git checkout master"
	hf__command "./" "git pull"
	hf_command "git pull"
	dpop
}

hf_cvsync_only() {
	dpush "cvsync_only"
	hf__command "./" "cvsync -c $CVSYNCCONF >> $CVSYNC_LOG_FILE"
	dpop
}

# $1 push
hf_cvsync() {
	dpush "cvsync"
	hf_cvsync_only

	hf_command "git checkout master >> $CVSYNC_LOG_FILE"
	hf_command "git pull"
	hf_command "rm -rf *"

	hf__command "./" "cvs -d $CVSROOT co -P $SRCNAME >> $CVSYNC_LOG_FILE 2>&1" 1
	hf__command "./" "cvs -d $CVSROOT co -P $PORTSNAME >> $CVSYNC_LOG_FILE 2>&1" 1
	hf__command "./" "cvs -d $CVSROOT co -P $XENOCARANAME >> $CVSYNC_LOG_FILE 2>&1" 1

	hf_command "git add -A :/ >> $CVSYNC_LOG_FILE"
	hf_command "git commit -m 'sync with openbsd-current' >> $CVSYNC_LOG_FILE 2>&1" 1

	[ "x$1" == "x-p" ] && hf_push

	hf__command "./" "rm $CVSYNC_LOG_FILE"
	dpop
}

hf_error() {
	__stop_dots
	dprint_trace_exit_if_error $1
}

### main ###
[ $# -lt 1 ] &&	hf_usage || hf_main "$@"
exit 0

